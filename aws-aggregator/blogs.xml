<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Raffaele Abramini on Medium]]></title>
        <description><![CDATA[Stories by Raffaele Abramini on Medium]]></description>
        <link>https://medium.com/@oldirony?source=rss-449319c061c3------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*LsDGTsYByWyXgYP6.jpg</url>
            <title>Stories by Raffaele Abramini on Medium</title>
            <link>https://medium.com/@oldirony?source=rss-449319c061c3------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 25 Oct 2018 06:01:49 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@oldirony" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[ My next steps]]></title>
            <link>https://medium.com/@oldirony/next-steps-%EF%B8%8F-c3c37dbd7e15?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/c3c37dbd7e15</guid>
            <category><![CDATA[personal-development]]></category>
            <category><![CDATA[graphql]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sat, 17 Mar 2018 09:45:07 GMT</pubDate>
            <atom:updated>2018-03-17T10:14:15.060Z</atom:updated>
            <content:encoded><![CDATA[<p>Learning about form management was the last piece of the puzzle and it gives me confidence to say I reached a good understanding of Angular 2.</p><p>The proper way to progress further is to start using it on a daily basis, in a professional environment.</p><p>So… I’ve the chance of focusing on something new!</p><p>I feel like I left React a bit aside lately… And that’s a shame! I love how <strong>intuitive and fun</strong> is to create and maintain a project with it (sorry Angular).</p><p>One area in particular that fascinates me is the how to digest these new <strong>GraphQL</strong> APIs and use this <em>Apollo, </em>of which I don’t much (or anything at all).</p><p>It sounds a bit fullstacky, but I’d love to have a better understanding on the matter.</p><p>So let’s start give it a shot with this new course <a href="https://www.udemy.com/graphql-with-react-course/">GraphQL with React: The Complete Developers Guide | Udemy</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c3c37dbd7e15" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[On full-stack development]]></title>
            <link>https://medium.com/@oldirony/on-full-stack-development-d0feaa63e0aa?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/d0feaa63e0aa</guid>
            <category><![CDATA[web-development]]></category>
            <category><![CDATA[fullstack-development]]></category>
            <category><![CDATA[backend-development]]></category>
            <category><![CDATA[front-end-development]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sat, 03 Feb 2018 16:05:57 GMT</pubDate>
            <atom:updated>2018-02-04T09:40:27.188Z</atom:updated>
            <content:encoded><![CDATA[<h4>From an ignorant frontend developer’s point of view</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FccnjhpxiMBa6zIbZ-4U0A.png" /></figure><p>I personally thought a developer, to be considered ‘full-stack’, needed to have a deep knowledge, if not to master, both the frontend and backend worlds.</p><p>However, reading around the web, I get that <em>this is not the correct definition</em>.</p><p>As this very detailed <a href="https://medium.com/coderbyte/a-guide-to-becoming-a-full-stack-developer-in-2017-5c3c08a1600c">article</a> says:</p><blockquote>Being a Full-Stack Developer doesn’t mean that you have necessarily <em>mastered</em> everything required to work with the front-end or back-end, but it means that you are able to <em>work</em> <em>on</em> both sides and <em>understand</em> what is going on when building an application.</blockquote><p>But if this is the right definition, I’ve a couple of doubts.</p><h4>Does this mean a humble FE is not supposed to know ‘what is going on when building an application’ ?</h4><p>This is how this definitions sounds to me. And of course<strong> something like this cannot be taken seriously</strong>. Performance, bundle-sizing, API integration, FE routing, structuring forms are all activities which require a good understanding of the backend world. You don’t understand that, you simply <em>cannot</em> be a good FE developer.</p><p>Also, <em>curiosity</em> is a key feature in development. If you reached a good FE knowledge you <strong>want </strong>to understand what’s around. I can bet every good FE dev has deployed his node.js server, or, probably more in the past than now, has played with PHP frameworks and app, from Wordpress to Laravel.</p><p>I personally have knowledge of Node.js and PHP servers, Linux systems, CI &amp; CD, testing, SQL &amp; noSQL databases. I’m a not a genius with them, but I can and I enjoy working in these areas. Does this make me a full-stack developer? I don’t think so. I’m a specialised FE dev with a side knowledge of ‘what is going on when building an application’ .</p><h4>How does this fit in a large team?</h4><p>I don’t know!</p><p>I reckon being able to tackle all the aspects of developing an application can be very useful in a small startup where the business cannot afford specialised roles. Or as well, it could be a very useful set of skills for a technical manager to scope and organise projects.</p><p>However, for example, if my team has to take care of several frontend features and I’ve to distribute these tasks in an Agile environment, <strong>I’d prefer to rely on strong, specialised teammates.</strong> Wouldn’t you do the same?</p><p>I’ve the feeling a fullstack developer <em>knows how to do it</em>, but maybe <em>doesn’t know the </em><strong><em>best</em></strong><em> way to do it</em>. There are so many things to know on both the front and the back ends of web development, a person cannot simply know all of them.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/568/1*i98u0PDSA9My65hXKW4Vbg.jpeg" /><figcaption>Sorry for this</figcaption></figure><p>I don’t mean to offend anyone, I’m just eager to find someone able to clarify my doubts.</p><p>If anyone reads this and has a different point of view, please, I mean it - <strong>please!, </strong>let me know!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d0feaa63e0aa" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Angular2 . Quick ref notes | part 3]]></title>
            <link>https://medium.com/@oldirony/angular-4-learnings-part-3-e5a287b9143e?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/e5a287b9143e</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[angular2]]></category>
            <category><![CDATA[angularjs]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sat, 13 Jan 2018 13:16:04 GMT</pubDate>
            <atom:updated>2018-01-13T13:19:59.352Z</atom:updated>
            <content:encoded><![CDATA[<h4>Custom directives, services and routes</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Dtiwwv5zUzGWFeZ2rSCrFg.png" /></figure><h3>Custom directives</h3><p>When creating a new directive you can use this two powerful decorators: @HostBinding and @HostListener decorators:</p><p><strong>HostBinding</strong> bind an element property to a directive property. For instance:</p><pre>@HostBinding(&#39;class.open&#39;) isOpen:Boolean = false</pre><p>binds the ‘open’ class to the boolean property isOpen. Setting this property to true will add the class the html element.</p><p><strong>HostListener</strong> bind an element event to a directive method. For instance:</p><pre>@HostListener(&#39;click&#39;) handleClick() {<br>   ...<br>}</pre><p>will make your directive listening to the ‘click’ events on the host html element and wil trigger the newly defined <em>handleClick </em>method whenever the click happens.</p><p>In the directive constructor you have access to at least these 2 props :</p><pre><strong>private </strong>elRef: ElementRef, <strong>private </strong>renderer: Renderer2</pre><p><strong>elRef</strong> contains the actual element in its <em>nativeElement</em> property.</p><h3>Services</h3><p>Services is common code used in several components that doesn’t have influence over the DOM elements of the components. It’s used by them but it doesnt belong to them. (es. store and fetch data).</p><p>A service is a simple ts class. It can have properties and methods. However, to have it instanciated, <em>don’t use the </em><strong><em>new </em></strong><em>keyword.</em></p><p>Instead, in your component main decorator, add the providers property assigned to an array containing your service class.</p><pre>@Component({<br>  selector: &#39;app-component&#39;,<br>  providers: [MyService]<br>})</pre><p>Secondly, define a myService property of the type of your service in the component constructor.</p><pre><strong>constructor</strong>(<strong>private </strong>myService:MyService) { }</pre><h4><strong>However</strong></h4><p>Depending on where you instantiate this component, the instance will be available to a different audience.</p><p>If you instantiate it on the <strong>AppModule</strong>, the instance will be available to <strong>all the modules and services</strong>.</p><p>If you instantiate it on the <strong>AppComponent</strong>, the instance will be available to <strong>all the modules</strong> but not the services.</p><p>If you instantiate it on the <strong>a child component</strong>, the instance will be available to <strong>the component and its children</strong>.</p><h4>So</h4><p>Usually you probably want to add the service in the provider only once, generally speaking in the AppModule. To access it, just pass the type in the constructor of your component.</p><h4>To inject services in other services</h4><p>Remember to add in to the receiver service the @Injectable decorator. <br>That’s it!</p><h3>Routing</h3><h4>Setup</h4><p>To setup the routes, create an array of type <strong>Routes</strong>, imported from <strong>@angular/router</strong> and assign to it objects with a <strong>path</strong> and a <strong>component</strong> property<em>.</em></p><p>Then, add it to the <em>imports </em>array in the NgModule decorator, invoking the forRoot function with the routes array as parameter.</p><pre>import { RouterModule, Routes } from &quot;@angular/router&quot;;<br><br><strong>const routes: Routes = [<br>    { path: &#39;&#39;, component: HomeComponent },<br>    { path: &#39;about-us&#39;, component: AboutComponent },<br>];</strong><br><br>@NgModule({<br>    declarations: [<br>        AppComponent,<br>        HomeComponent,<br>        AboutComponent,<br>    ],<br>    imports: [<br>        BrowserModule,<br>        <strong>RouterModule.<em>forRoot</em>(routes)<br></strong>    ],</pre><p>Step 2 is to add the directive — placeholder that updates its content with a module we specified in the routes, when the path matches, in your app html template.</p><pre>&lt;router-outlet&gt;&lt;/router-outlet&gt;</pre><h4>Links in template</h4><p>To use a link within the router logic, add a <strong>routerLink</strong> attribute with the new url. Remember, the link is relative to the view where the link lies.</p><pre>&lt;a <strong>routerLink=&quot;/about-us&quot;</strong>&gt;About us&lt;/a&gt;</pre><h4>Provide router active class</h4><p>To make the About Us link active when the url of the page is the same of the <em>routerLink</em>, use the <strong>routerLinkActive</strong> set to the name of the active class you want to give.</p><pre>&lt;a routerLink=&quot;/about-us&quot;<strong><br>   routerLinkActive=&quot;is-active&quot;</strong>&gt;About us&lt;/a&gt;</pre><p>This directive however just checks if the provided link matches the url. For instance, the previous example would match also something like <br>/<em>about-us/hello</em></p><p>To prevent this from happening, you should also specify some options</p><pre>&lt;a routerLink=&quot;/about-us&quot;<strong><br>   </strong>routerLinkActive=&quot;is-active&quot;<strong><br>   [routerLinkActiveOptions]=&quot;{exact: true}&quot;</strong>&gt;About us&lt;/a&gt;</pre><h4>Navigate programmatically</h4><p>You can access the Router directly from the ts file.</p><pre><strong>constructor</strong>(<br>    <strong>private </strong>router: Router<br>) </pre><p>And use the .navigate method from the newly defined <strong>router</strong> function.</p><pre>this.<strong>router.navigate</strong>([&#39;/about-us&#39;])</pre><p>If you are in a nested component (see later for more details), you may want to add an extra paramenter to the function that define what the new url has to be relative to.</p><pre>this.router.navigate([this.product.id],<strong> { relativeTo: this.route })</strong></pre><h4>Dynamic routes</h4><p>To access a dynamic router, lets first define one with the following syntax.</p><pre>const routes: Routes = [<br>    { path: &#39;<strong>/user/:id</strong>&#39;, component: UserComponent },<br>];</pre><p>Now the component UserComponent wil be activated once you navigate to something like <em>/user/110</em>.</p><p>To access that <em>id </em>from the code, you’ll need to get the activatedRoute from the constructor:</p><pre>constructor(<br>    private <strong>route: ActivatedRoute</strong><br>) {</pre><p>And access it in the method you need reading the <em>params</em> of the <em>snapshot</em> object of the <em>route</em> object.</p><pre>ngOnInit() {<br>    this.id = this<strong>.route.snapshot.params[&#39;id&#39;]</strong><br>}</pre><p>This solution works fine when the component is first loaded. However, if the path parameters changes, you need a way to dinamically update your properties. Using a subscribing to the params observable will do the trick.</p><pre>ngOnInit() {<br>    this<strong>.route.params<br>       .subscribe(<br>          (params: Params) =&gt; {<br>             this.id = params.id<br>          }<br>       );<br></strong>}</pre><h4>Query parameters and hashes</h4><p>To setup a router link with some query parameters user the <strong>queryParams</strong> directive on the a tag:</p><pre>&lt;a<br>   [routerLink]=&quot;[&#39;user&#39;, 30]&quot;<br>   [<strong>queryParams</strong>]=&quot;{isAdmin: 1}&quot;<br>&gt;<br>   my Link    <br>&lt;/a&gt;</pre><p>The new url will be resolved in <em>/user/30?isAdmin=1 .</em></p><p>To add an hash, or more technically a fragment, use the, guess what?, <strong>fragment</strong> directive.</p><pre>&lt;a<br>   [routerLink]=&quot;[&#39;user&#39;, 30]&quot;<br>   <strong>fragment</strong>=&quot;about&quot;<br>&gt;<br>   my Link<br>&lt;/a&gt;</pre><p>The new url will be resolved in <em>/user/30#about .</em></p><p>To achieve this programmatically, just pass some options to the <em>navigate </em>method of router.</p><pre>this.router.navigate([&#39;user&#39;, 30], {<br>        <strong>queryParams</strong>: {<br>            isAdmin: 1,<br>        },<br>        <strong>fragment</strong>: &#39;intro&#39;<br>    })</pre><p>To get this values from the url, you can do something very similar to what we did for the parameters. So:</p><pre>ngOnInit() {<br>    this.route.<strong>snapshot.queryParams</strong><br>    this.route.<strong>queryParams</strong>.subscribe()<br><br>    this.route.<strong>snapshot.fragment</strong><br>    this.route.<strong>fragment</strong>.subscribe()<br>}</pre><p>To keep the current query parameters on new links with the navigate method, you may want to use the <em>queryParamsHandling</em> option set to ‘<em>preserve</em>’. To merge with new ones, set that property to ‘<em>merge</em>’.</p><pre>this.router.navigate([&#39;user&#39;, 30], {<br><strong>    queryParamsHandling: &#39;preserve&#39;</strong><br>})</pre><h4>Nested routes</h4><p>To user nested routes you have first to define their structure in the main app module. Let’s add, for example a <strong>products </strong>route. From there we want to be able to see single product from as children of the <strong>ProductsComponent</strong> . So we have to specify the <em>children</em> property as an array of the nested routes.</p><pre>const routes: Routes = [<br>    { path: &#39;&#39;, component: HomeComponent },<br>    { path: &#39;about-us&#39;, component: AboutComponent },<br>    { path: &#39;products&#39;, component: ProductsComponent, <strong>children: [<br>       { path: &#39;:id&#39;, component: SingleProductComponent },<br>    ]</strong>},<br>];</pre><p>In the parent component we also have to add a second <em>router-outlet</em> tag to allow the children to be displayed. So in this case we add this to the <strong>ProductsComponent</strong> .</p><pre>&lt;router-outlet&gt;&lt;/router-outlet&gt;</pre><h4>Redirections</h4><p>Instead of specifying a component in you routes, you can also define an alternative url where to be redirected to. For instance:</p><pre>const routes: Routes = [<br>    { path: &#39;&#39;, component: HomeComponent },<br>    { path: &#39;about-us&#39;, component: AboutComponent },<br><strong>    { path: &#39;who-we-are&#39;, redirectTo: &#39;about-us&#39; }</strong><br>];</pre><p>It’s good practice to add a <em>pathMatch</em>: ‘full’ property to avoid matching issues.</p><pre><strong>{ path: &#39;who-we-are&#39;, redirectTo: &#39;about-us&#39;, pathMatch: ‘full’ }</strong></pre><h4>Wildcards</h4><p>To specify wildcards, simply use the double asterisk <strong>**</strong></p><pre>const routes: Routes = [<br>    { path: &#39;&#39;, component: HomeComponent },<br>    { path: &#39;about-us&#39;, component: AboutComponent },<br><strong>    { path: &#39;**&#39;, component: &#39;NotFound&#39;}</strong><br>];</pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e5a287b9143e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Angular2 . Quick ref notes | part 2]]></title>
            <link>https://medium.com/@oldirony/angular4-quick-ref-notes-part-1-68aa75de85c?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/68aa75de85c</guid>
            <category><![CDATA[angular2]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sun, 26 Nov 2017 09:57:25 GMT</pubDate>
            <atom:updated>2018-01-13T13:17:43.583Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TOyDXU3sDRglhjfuY0rO8g.png" /></figure><h4>Relationships between components</h4><h3>Passing external properties to component</h3><h4>Step 1</h4><p>Using the Input decorator, make your component aware of this coming-in property. You can also pass an optional parameter to add to change the [myProp] name in the template (<em>myPropAlias</em> in the example).</p><pre>class MyComponent {<br><strong>   @Input(&#39;myPropAlias&#39;) myProp;</strong></pre><pre>   constructor() { }<br>}</pre><h4>Step 2</h4><p>You can now match this property with an external one in the html template.</p><pre>&lt;app-my-component<br><strong>   [myPropAlias]=&quot;myExternalProp&quot;<br></strong>&gt;<br>&lt;/app-my-component&gt;</pre><h3>Dispatching events to parent components</h3><p>When you have the necessity for a parent component to invoke a method when something specific happens in a child component (MyComponent, in this example), you have to go through 2 steps.</p><h4>Step 1</h4><p>Define the event inside the component class. You’ll have to import the <em>EventEmitter </em>class and the <em>Output </em>Decorator from @angular/core</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d50075c02a903b467d751a8c98d481cc/href">https://medium.com/media/d50075c02a903b467d751a8c98d481cc/href</a></iframe><h4>Step 2</h4><p>Now wherever you use this component, you can hook the parent’s methods to your new component event.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1562785c3a7af545431800277c08d70a/href">https://medium.com/media/1562785c3a7af545431800277c08d70a/href</a></iframe><p>The <strong>$event</strong> object holds the events data: pass it as a parameter to make it available to the invoked methods.</p><h3>Referencing DOM elements in the template</h3><p>If you want to have a particular html element of your html template in your typescript code, you may want to use a local reference <strong>#</strong>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5cdc407ddc124135c2b2adec47396d95/href">https://medium.com/media/5cdc407ddc124135c2b2adec47396d95/href</a></iframe><p>At this point we are able to get the newly referenced element into my ts code as parameter of the <em>doSomething</em> method.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/70fb79b207503641f6fe4102efa36262/href">https://medium.com/media/70fb79b207503641f6fe4102efa36262/href</a></iframe><p>If you want to have access to a local reference before the methods, there is <strong>another way to achieve this</strong>. This is via the <strong>ViewChild</strong> decorator.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/215a8381ff51869467b4ff3e33e422af/href">https://medium.com/media/215a8381ff51869467b4ff3e33e422af/href</a></iframe><h3>Passing complex html content to a component</h3><p>To pass actual HTML content inside a component in this way:</p><pre>&lt;app-my-component&gt;<br><strong>  &lt;h1&gt;My title&lt;/h1&gt;<br>  &lt;h2&gt;My subtitle&lt;/h2&gt;<br><br>  &lt;ul&gt;<br>    &lt;li&gt;Even&lt;/li&gt;<br>    &lt;li&gt;a&lt;/li&gt;<br>    &lt;li&gt;list&lt;/li&gt;<br>  &lt;/ul&gt;<br></strong>&lt;/app-my-component&gt;</pre><p>You just have to make sure that in your MyComponent template you have the <strong>ng-content</strong> directive</p><pre>&lt;div class=&quot;my-content&quot;&gt;<br>  &lt;p class=&quot;my-content-intro&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ad cumque deleniti molestias nam, optio provident.&lt;/p&gt;<br>  <strong>&lt;ng-content&gt;&lt;/ng-content&gt;</strong><br>&lt;/div&gt;</pre><h3>Referencing DOM elements in ng-content</h3><p>If you want to refer to the code inside ng-content, you can simply repeat the steps we saw earlier for DOM access. The only difference is not to use the @ViewChild decorator but <strong>@ViewContent.</strong></p><h3>Components Lifecycle Hooks</h3><p>Every component has to go through different stages when built, changed and destroyed. Angular gives us hooks to allow us to call our methods during those stages.</p><p>Just remember to import these interfaces from <strong>@angular/core</strong> when using them.</p><p>I could rewrite them here, but for the sake of briefness, I’ll just refer you to the official documentation <a href="https://angular.io/guide/lifecycle-hooks#lifecycle-sequence">https://angular.io/guide/lifecycle-hooks#lifecycle-sequence</a>.</p><p>This is more or less everything about components. I’m about to start taking a deep dive into directives, always with <a href="https://www.udemy.com/the-complete-guide-to-angular-2/learn/v4/overview">this amazing course</a> on <a href="http://udemy.com">Udemy</a>. I warmly suggest you to give it a check!</p><p>This article is part of my journey in learning Angular4. Here’s the other articles:</p><ul><li><a href="https://medium.com/@oldirony/angular4-quick-start-notes-pt-1-fe7c43f88fdf">Step 1. Components overview</a></li><li><strong>Step 2. Relationships between components</strong></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=68aa75de85c" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introduction to Frontend Javascript testing]]></title>
            <link>https://medium.com/@oldirony/on-frontend-javascript-testing-ddb9ebf19cae?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/ddb9ebf19cae</guid>
            <category><![CDATA[unit-testing]]></category>
            <category><![CDATA[testing]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[jest]]></category>
            <category><![CDATA[es6]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Tue, 17 Oct 2017 11:55:43 GMT</pubDate>
            <atom:updated>2017-11-26T11:31:09.398Z</atom:updated>
            <content:encoded><![CDATA[<h4>A introductory, framework-agnostic article about how, what and when to test.</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dPMvyyUzxgoDHIfhuENRNA.png" /></figure><h3>📓 Intro</h3><p>So many times we all wrote <strong>Javascript</strong> <strong>components</strong> and so many times we had to modify, change, extend them. Sometimes they are <strong>not very complicated</strong>; sometimes the change request arrives during the<strong> same project phase</strong>; sometimes we <strong>remember how</strong> and in which scenarios <strong>the component works</strong>; sometimes we had had time to implement <strong>meaningful error messages</strong>; sometimes we are the authors of these components.</p><p>Other times, we are in trouble.</p><h3>When is JS testing useful?</h3><p>Generally speaking, once you have implemented a series of tests these are <em>always</em> good to have. However, there are situations where you would sacrifice you hamster to have had them.</p><ol><li><strong>Your component/code is getting complicated.<br></strong>Is that line of code really necessary? In which scenario does my component requires this css class to work? Complexity prevents us to see all the consequences of our actions, we need some extra help to make sure everything will continue working after our modification.</li><li><strong>You have to edit a component you written months or years ago.</strong><br>Sometimes, while coding, it seems obvious what a function does and what those variables mean. Of course, if you are a good developer, you’d use meaningful names and, when necessary, you’d add some comments.<br>However, sometimes these are not enough and if you are changing some very old code what seemed obvious now is an enigma. Let the testing tools help you!</li><li><strong>You have to edit a component someone else wrote.<br></strong>See situation #2</li></ol><h3>How does testing actually work?</h3><p>To test you need a <em>testing suite</em> or <em>framework</em>. I’m going to use <a href="https://github.com/facebook/jest">Jest</a>: I like it because it’s a complete suite and I’m used to it for testing React apps. Other great test frameworks are <a href="https://github.com/jasmine/jasmine">Jasmine</a> and <a href="https://github.com/mochajs/mocha">Mocha</a>.</p><ol><li>Install the framework via npm.</li><li>Have a <em>componentToTest</em>.test.js file (or <em>componentToTest</em>.spec.js).</li><li>Insert some tests in this file.</li><li>Run the framework via console.</li></ol><p>While the steps 1, 2 and 4 are dead simple, once you check the documentation of the testing suite, <strong>step #3 is definitely the most interesting</strong>.</p><p>There are different types of tests, but lets first start with a simple one.</p><h4>Example #1</h4><p>Lets say we have a function in a utilities.js file.</p><pre>export function <strong>removeUnderscores</strong>(myString) {<br>    return myString.replace(/_/g, &#39;&#39;);<br>}</pre><p>At this point we want to make sure this function works and will <em>always</em> work.</p><p>In our utilities.spec.js we need now to create a test in this way</p><pre>import { <strong>removeUnderscores</strong> } from &#39;./utilities&#39;;</pre><pre><strong>describe</strong>(&#39;Testing my utilities&#39;, () =&gt; {<br>  <strong>test</strong>(&#39;<em>removeUnderscores</em> actually removes underscores&#39;, () =&gt; {<br>    <strong>expect</strong>(removeUnderscores(&#39;blah_blah_blah&#39;))<br>      .<strong>toEqual</strong>(&#39;blahblahblah&#39;);<br>  });<br>});</pre><p>Once setup a test like this, run the test suite in the console and…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Dp5BCBputKHFqQRhKJpfaw.png" /><figcaption>Voila’! It works!</figcaption></figure><p>That’s of course a very simple test, but now if someone changes and breaks that function you’ll know it before it’s too late!</p><h3>The syntax</h3><p>As we saw in the previous test, we nees to use some particular functions like describe, test, expect, in order to have things done. These functions comes with your test suite.</p><p>They slightly change between frameworks, but let’s see what the generically do.</p><h4><strong>describe(description, func)</strong></h4><p>This function is used to wrap groups of tests together and organise them under a readably title. Nothing else.</p><h4>test (description, func)</h4><p>test() or it() is the container for the actual test. It describes what it contains and it runs allnthe <em>assertions </em>inside the callback.</p><h4>expect(object)</h4><p>expect() is the first element of an assertion. It requires the <em>object</em> of the assertion as parameters and it has to concatenated to other <em>functions</em> that complete the process.</p><p>These other <em>functions</em> come from some of the test suites or you may add extra assertion libraries to achieve the result you want. For example <em>Mocha</em> requires the library <em>Chai </em>to make assertions.</p><h3>An example about functional testing</h3><p>Example #1 is a typical <strong>unit testing</strong> example — we make sure a function, the smallest unit in a module, with a given parameter returns a specific result.</p><p><strong>Functional testing</strong> is about simulate the component behaviour and double-check that everything goes how it should during this path. Let’s check an example:</p><h4>Example #2 — Small navigation toggle</h4><p>Lets pretend we have a small mainNav component. This script will look for a specific element in the DOM and, if it finds, it will listen for a click on a children <em>button</em>. Here’s the <a href="https://github.com/oldirony/js-testing/blob/master/app/components/mainNav/mainNav.js">code for mainNav</a>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/39dea9c699a56eea726d1fc4b4188e97/href">https://medium.com/media/39dea9c699a56eea726d1fc4b4188e97/href</a></iframe><p>If you checked the code you may have noticed mainNav’s button, once clicked, does a couple of things.</p><ol><li>It <strong>switches its label </strong>from ‘Open menu’ to ‘Close menu’ and vice versa</li><li>It <strong>adds and removes the <em>.is-hidden</em></strong> class from the <em>content </em>element</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/697/1*atV3xvjxZruqSOAds0bQ8A.png" /></figure><p>Now that we know what it does, <strong>let’s make sure it works!</strong></p><p>Give a check to the code below, I’ll describe it after.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/e44bdc9d89a1ce0beb0ccfb1b01ec39a/href">https://medium.com/media/e44bdc9d89a1ce0beb0ccfb1b01ec39a/href</a></iframe><p>First, lets make sure we have our class imported.</p><p>Now with the <em>beforeAll</em> function (I think that’s pretty clear what it does) let’s simulate the document.body content with the required code and create the instance.</p><p>I first like to create a empty tests that stops if our component returns errors on construction <em>[It’s initialised without errors]</em>.</p><p>Let’s check our first <em>functional</em> test <em>[Click on button changes button text].</em>We trigger a first click with the vanilla js function <em>click</em> and we <em>expect </em>the new button.text to be equal to the static class property <strong>labels.close</strong>. Triggering another click, we expect the label to be equal to labels.open. It if fails to do so for any reasons, now the test will make us aware of it.</p><p>The second test checks whether the <em>content </em>element gets the <em>.is-hidden</em> class on toggle click.</p><p>And…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4ZhAZlkfL8wVZjZguC1oAw.png" /><figcaption>Yay!</figcaption></figure><p>This of course is just a brief intro to what is, or should be, actually a very important aspect of frontend development.</p><p>Here’s some other resources you can read to learn more about testing with Javascript:</p><ol><li><a href="https://www.sitepoint.com/javascript-testing-unit-functional-integration/">Unit, functional and integration tests</a></li><li><a href="https://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/">Intro to test-driven development</a></li><li><a href="https://medium.freecodecamp.org/the-right-way-to-test-react-components-548a4736ab22">Testing React components</a></li></ol><h3>👏 <strong>Clapping is caring! </strong>⬇️</h3><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ddb9ebf19cae" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to get your Medium posts on your website]]></title>
            <link>https://medium.com/@oldirony/how-to-get-your-medium-posts-on-your-website-bcf45ab46529?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/bcf45ab46529</guid>
            <category><![CDATA[expressjs]]></category>
            <category><![CDATA[medium-api]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[nodejs]]></category>
            <category><![CDATA[ajax]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sun, 01 Oct 2017 11:58:39 GMT</pubDate>
            <atom:updated>2017-10-01T14:04:09.701Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GPlHWF_9vpVVhOJmIrtWrQ.png" /><figcaption>Get your Medium posts to your website via Medium APIs</figcaption></figure><p>A brief tutorial on how to display your latest posts on your website.</p><h3>The problem</h3><p>Some months ago I got the idea to add a blog section to my portfolio: an area where I could share my experiences and learnings. The idea was amazing: create a custom small CMS with Node.js, maybe linked to a MongoDB database. I’d have also to create a CMS interface, handle the post <em>status </em>and several other things. Although the idea was feasible, it would have also required quite a bit of time to develop and test the code.</p><p>At that point I asked myself, why not to use an existing platform? Take <a href="https://medium.com/u/504c7870fdb6">Medium</a>, for example: awesome editor, great minimal UI and a cheerful and rich community of users. And so I did choose Medium as media to post and display my, lets say it, <em>mediocre</em> posts.</p><p>Eventually however, the idea of displaying the posts on <a href="https://oldirony.cc">my portfolio</a> pushed its way in my brain once again. I first checked the Medium API, I created an app on the dev platform, only to discover that these APIs are mainly focused on <em>writing </em>posts, more that merely displaying.</p><p>Sniffing around google and Stack Overflow I found some guys saying that answer lied in their rss feed: <a href="https://medium.com/feed/@username"><em>https://medium.com/feed/@username</em></a></p><p>What did I do than? I got <a href="https://github.com/axios/axios"><em>axios</em></a><em> </em>in <a href="https://github.com/oldirony/portfolio">my portfolio React app</a> and shot a quick GET call to the rss feed url: what did I received? An obvious CORS error and a fancy error message from the Medium server saying:</p><pre>localhost is not an allowed domain. Our host is (medium.com:443, /feed/@oldirony)</pre><p><strong>Client side issues!</strong> So, let’s focus on how I solve the issue.</p><h3>The solution</h3><h4>Step 1: Create an Express controller</h4><p>As we said, I faced these errors because I was trying to get this ajax call from the <em>client</em>. Lets bypass the issue and fetch my posts from the server.</p><p>On my Node server, managed by <em>express.js</em>, I first had to create a new controller and refer it to its core file. The chosen route is <em>/get-posts</em>, so once the controller is setup I can access <em>oldirony.cc/get-posts </em>via GET to receive a json object with my Medium posts.</p><pre><strong>import </strong>getPostsController <strong>from </strong>&#39;./server/get-posts&#39;;<br><br>server.get(&#39;/get-posts&#39;, getPostsController);</pre><p>In <em>get-posts.js, </em>the first thing you’ve to do is to export as default the controller function:</p><pre><strong>export default </strong>(req, res) =&gt; {<br>   res.send(&#39;Yeah&#39;)<br>}</pre><h4>Step 2: Fetch posts via Node</h4><p>At this point, we have to make the actual GET request. I used axios as library to fetch the posts, as I already had it in my dependencies.</p><p>On call success, I send the stringified version of the response data to the page.</p><pre><strong>import </strong>axios <strong>from </strong>&#39;axios&#39;;</pre><pre><strong>const </strong>POSTS_URL = &#39;https://medium.com/feed/@oldirony&#39;;<br><br><strong>export default </strong>(req, res) =&gt; {<br>   axios.get(POSTS_URL)<br>      .then(response =&gt; {<br>         res.end(JSON.stringify(response.data))<br>      })<br>      .catch(err =&gt; res.end(err));<br>}</pre><h4>Step 3: Convert posts from XML to JSON</h4><p>Yes, It’s not finished yet. I found on the internet people suggesting to append ?format=json to the endpoint url to get the data in a JSON format, but, I don’t know why, it didn’t work for me.</p><p>So, as the documentation is almost inexistent, I chose another solution.</p><p>Using the <em>xml2js </em>library, I parsed the string using its own function <em>parseString </em>and I sent back to the page the stringified list of articles <em>res2.rss.channel[0].item .</em></p><pre><strong>import </strong>axios <strong>from </strong>&#39;axios&#39;;<br><strong>import </strong>{ parseString } <strong>from </strong>&#39;xml2js&#39;;</pre><pre><strong>const </strong>POSTS_URL = &#39;https://medium.com/feed/@oldirony&#39;;<br><br><strong>export default </strong>(req, res) =&gt; {<br>   axios.get(POSTS_URL)<br>      .then(response =&gt; {<br>         parseString(response.data, (err, res2) =&gt;{<br>            res.end(JSON.stringify(res2.rss.channel[0].item))<br>         })<br>      })<br>      .catch(response =&gt; res.end(response.data));<br>}</pre><h4>Step 4: Get posts to the actual website page</h4><p>Now that we got our list of posts of our Node server we can easily access them from our page.</p><p>I’m using React and Redux on portfolio, so what I did was to setup an action creator that fetches from our predefined route ‘/get-posts’ on a specific homepage section onMount event.</p><p>This, anyway, is the essential code:</p><pre><strong>import </strong>axios <strong>from </strong>&#39;axios&#39;;</pre><pre><strong>const </strong>POSTS_URL = &#39;/get-posts&#39;;<br><br><strong>export function </strong>fetchPosts() {<br>   <strong>return function</strong>(dispatch) {<br>      axios.get(POSTS_URL).then((response) =&gt; {<br>         // Here response.data contains an array with your <br>         // most recent posts.<br>      })<br>   }<br>}</pre><p>And this is it! For any question, just drop a line in the comments.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bcf45ab46529" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Angular2. Quick ref notes | part 1]]></title>
            <link>https://medium.com/@oldirony/angular4-quick-start-notes-pt-1-fe7c43f88fdf?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/fe7c43f88fdf</guid>
            <category><![CDATA[angular2]]></category>
            <category><![CDATA[angularjs]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[angular-4]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Fri, 29 Sep 2017 15:24:33 GMT</pubDate>
            <atom:updated>2018-01-13T13:49:13.895Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7e477NROxlD6SA9fJKau-A.png" /></figure><h3>Angular2 . Quick ref notes | part 1</h3><h4>Component overview</h4><p>So I started learning Angular4! It looks like an interesting journey: I’m having the chance to see how another dev team solves the typical issues that a js framework faces.</p><p>I listed here the first part of my learnings. You can use this a quick reference guide.</p><h3>Components</h3><p>Components are the most basic element of the apps. These are the Lego bricks what will compose your engine. These elements will contain their own JS logic, html structure and styles.</p><p>To create a component you can either run this command in the console:</p><pre>ng generate component <em>componentName</em></pre><p>Or this, with a more compact syntax:</p><pre>ng g c <em>componentName</em></pre><p>Or create follow this steps to create a component manually:</p><h4>1. Create the main .ts file</h4><p>Create a componentName/componentName.component.ts file. In here, simply define the class that is going to give shape to your component and export it.</p><pre>export class ComponentNameComponent {<br>   constructor(){}<br>}</pre><p>Also, remember to set this class up with the boilerplate structure of a component with a <strong>decorator</strong>. Import the decorator function from angular and define the minimal settings, <em>selector </em>and <em>templateUrl </em>(or template).</p><pre><strong>import </strong>{ Component } <strong>from </strong>&#39;@angular/core&#39;;<br><br><br>@Component({<br>    selector: &#39;app-component-name&#39;,<br>    templateUrl: &#39;./header.component.html&#39;<br>})<br><strong>export class </strong>ComponentNameComponent {<br>    <strong>constructor</strong>() {}<br><br>}</pre><ul><li><strong>selector</strong> defines the way you can invoke this component in your app. It can be an HTML selector (default), an attribute or event a class.</li><li><strong>templateUrl</strong> define the path to the html template of the component.</li><li>or <strong>template </strong>allows you to define an inline html template (useful for small components)</li></ul><p>There are a lot of other properties you can define from here. They are listed <a href="https://angular.io/api/core/Component">here</a>.</p><h4>2. Create the html template file.</h4><p>If you specified the <em>templateUrl</em> property, you’ll need also to add this template file.</p><h4>3. Include component in the app module</h4><p>In the app.module.ts file, import your newly created component with an <em>import</em> statement and add it in the <strong>declarations</strong> array of you app module.</p><pre><strong>import { ComponentNameComponent } from &#39;./header/header.component&#39;;</strong><br><br>@NgModule({<br>  declarations: [<br>    AppComponent,<br>    <strong>ComponentNameComponent</strong><br>  ],<br>  imports: [<br>    BrowserModule<br>  ],<br>  providers: [],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</pre><p>Decorators</p><h3>Template syntax</h3><p><strong>Property binding</strong> in templates with [ ]. You can edit all the js properties of the DOM element.</p><pre>[disabled]=“isDisabled”</pre><p><strong>Event binding</strong> in templates with (). Ie</p><pre>(click)=“myEvent()”;</pre><p><strong>Standard directives</strong> as <em>two ways data binding*</em><strong> </strong>using ngModel directive on an input.</p><pre>[(ngModel)]=“<em>propName</em>”</pre><ul><li>For 2 ways Data Binding, FormsModule should be included in the app module.</li></ul><p><strong>Structural directives</strong> requires * in the syntax. It handles the structure of the DOM element, not only properties. For instance:</p><pre>&lt;div <strong>*ngIf=&quot;</strong><em>isVisible</em><strong>&quot;</strong>&gt;&lt;/div&gt;</pre><p><strong>Local reference #</strong></p><h3>Directives</h3><p>Directives are instructions in the DOM. Usually the selector is an attribute. Defined with the @Directive decorator.</p><h4>If/else conditionals</h4><p>To use a simple if statement use</p><pre>*ngIf=”condition”</pre><p>To use the <em>else</em> in the conditional we need to create a local reference with #, add an ng-template with that reference and enhance the ngIf condition with it. For instance:</p><pre>&lt;p <strong>*ngIf=”isDefined; else #notDefined</strong>”&gt;It&#39;s defined!&lt;/p&gt;</pre><pre><strong>&lt;ng-template #notDefined&gt;<br>    </strong>&lt;p&gt;Not defined&lt;/p&gt;<strong><br>&lt;ng-template&gt;</strong></pre><h4>Conditional style</h4><p>Use [ngStyle] equal to an object of styles to customise the style of an element. For instance:</p><pre>&lt;div <strong>[ngStyle]=&quot;{backgroundColor: getBgColor()}&quot;</strong>&gt;</pre><p>NB. The kebab-case of the css props becomes camelCase.</p><h4>Conditional classes</h4><p>Use [ngClass] to conditionally set classes</p><pre>&lt;div <strong>[ngClass]=&quot;{isActive: isActive()}&quot;</strong>&gt;</pre><h4>For each loops</h4><p>Use the structural directive <strong>ngFor</strong>.</p><pre>&lt;div *<strong>ngFor=&quot;let </strong>item<strong> of </strong>items&quot;&gt;</pre><p>You can access the <em>index </em>prop in this fashion:</p><pre>&lt;div *<strong>ngFor=&quot;let </strong>item<strong> of </strong>items; let <strong>i</strong> of <strong>index</strong>&quot;&gt;</pre><h3>Typekit</h3><h4>Variables type restriction</h4><p>Typescript gives you the possibility of enforcing the type of the variables. Something similar to what you can (and should) do with <em>propTypes </em>in React.</p><p>First things first, when you create a class, you have to initialise the properties you are going to use later on. For instance:</p><pre>class<strong> </strong>MyClass {<br>    <strong>public </strong>title: <strong>string</strong>;<br>    <strong>public </strong>id: <strong>number</strong>;<br><br>    <strong>constructor</strong>() { }<br>}</pre><p>Define variable type on declaration using <strong>: </strong>. For instance</p><pre>myStringVar: string = ‘Text text’</pre><p>To define a variable as array of something, in this case an array of strings:</p><pre>myArray: <strong>string</strong>[] = [&#39;server1&#39;, &#39;server2&#39;];</pre><p>Define inline variable type with &lt;type&gt;myVar. You may want to use brackets.</p><pre>(&lt;HTMLInputElement&gt;event.target).value</pre><h3>Models</h3><p>As you know Angular2+ relies on typescript for internal code validation. Therefore, not surprisingly, Angular models are pure TS classes.</p><p>A model consists in a TS class where we define the required and possible properties. For instance:</p><pre><strong>export class </strong>MyModel {<br>    <strong>public </strong>name: <strong>string</strong>;<br>    <strong>public </strong>description: <strong>string</strong>;<br><br>    <strong>constructor</strong>(name: <strong>string</strong>, desc: <strong>string</strong>) {<br>        <strong>this</strong>.name = name;<br>        <strong>this</strong>.description = desc;<br>    }<br>}</pre><p>This is as more compact syntax:</p><pre><strong>export class </strong>MyModel {<br>    <strong>constructor</strong>(<strong>public</strong> name: <strong>string</strong>, <strong>public</strong> description: <strong>string</strong>) {}     <br>}</pre><p>This code will allow us to generate valid Recipes with typescript. To do this, just import the model and use to validate objects:</p><pre><strong>import { MyModel } from &quot;../myModel.model&quot;;</strong></pre><pre>[...]<br>export class RecipeListComponent implements OnInit {<br>  recipes: <strong>MyModel</strong>[] = [];</pre><p>This article is part of my journey in learning Angular4. Here’s the other articles:</p><ul><li><strong>Step 1. Components overview</strong></li><li><a href="https://medium.com/@oldirony/angular4-quick-ref-notes-part-1-68aa75de85c">Step 2. Relationships between components</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fe7c43f88fdf" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Angular2 | Initial thoughts]]></title>
            <link>https://medium.com/@oldirony/angular-4-and-i-first-impressions-b0af05b8d7c5?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/b0af05b8d7c5</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[first-impressions]]></category>
            <category><![CDATA[angular-4]]></category>
            <category><![CDATA[experience]]></category>
            <category><![CDATA[front-end-development]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sat, 02 Sep 2017 08:36:56 GMT</pubDate>
            <atom:updated>2018-01-13T13:19:01.334Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lKGdOtdqDQIA5273h_3yIw.png" /></figure><p>Let me stop you here. This is not a tutorial article or anything similar. I’m just collecting my first impressions on Angular4 to see how (and if) these change as I get to know more of this framework.</p><p>I’ve been working with React for a couple of years now and I find it elegant, efficient and, once you get to know it, very easy to integrate and extend.</p><p>However, I cannot ignore the fact that there are a lot of people who, for one reason or another, support Angular2 (that now has become Angular4).</p><p>I decided therefore to start exploring and learning it: this will allow me to have a more objective vision of these frameworks and when to use one or another. You know, knowledge is power. Learning will give you the chance of really comparing frameworks! How can you say something is better that something else, if you don’t know one of the comparison terms?</p><blockquote>How can you say something is better that something else, if you don’t know one of the comparison terms?</blockquote><p>I had already followed several courses on Udemy, so i decided to look for something to get started. The one I chose is this one: <a href="https://www.udemy.com/the-complete-guide-to-angular-2/">https://www.udemy.com/the-complete-guide-to-angular-2/</a>.</p><h3>First impressions</h3><h4>👍 Cli based</h4><p>I’ve been working with the CLI for 3 years now and I consider it an utmost invaluable (and indispensable) friend in my day to day work. The fact that to create and run even the most basic angular project requires this tool, is for me a very good sign.</p><h4>👍 Typescript</h4><p>I love the idea of having a tool that enforce the code while you write it. Even if it takes a tiny bit longer to have your script written, Typescript makes sure that your code is used in the way you want. If my parameter numberOfFishes is supposed to a number, I want it to always be a number. If a colleague of mine invokes that function with numberOfFishes set as ‘nope’, I’d like to throw something at him — better if that something is an error.</p><h4>✋ Modules</h4><p>About this, i haven’t quite enjoyed or, to be honest, completely understood, the need of specifying modules. For example, why do i have to invoke the FormModule to insert an input and binding it? I suppose this is to keep the bundle size to the bare minimum. However, meh!</p><h4>✋ Templating syntax</h4><p>I’m not quite amused by not being able to freely insert js in the templates and, instead, having to learn a quite specific syntax as, for instance, [(ngModule)]=“myProp”.</p><p>Once again, the one writing is only someone who has used this framework for no more than half an hour.</p><p>I’m writing a follow-up article as I study and experience Angular4. I’ll put the link in here… for anyone who managed to pass over this bunch of groundless opinions.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b0af05b8d7c5" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tales from another js MVC framework — pt .1]]></title>
            <link>https://medium.com/@oldirony/tales-from-another-js-mvc-framework-part-1-e46b744d4b0d?source=rss-449319c061c3------2</link>
            <guid isPermaLink="false">https://medium.com/p/e46b744d4b0d</guid>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Raffaele Abramini]]></dc:creator>
            <pubDate>Sun, 02 Jul 2017 09:38:45 GMT</pubDate>
            <atom:updated>2018-01-13T13:16:57.234Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-P7B_h3I_EOwbLT4we3XvA.jpeg" /></figure><p>Some weeks ago, talking with a friend of mine, we started imagining how difficult would be to create an MVC framework from scratch and which difficulties we could encounter. I had a bit of spare time during the following weekend, so I decided to give it a try.</p><p>The aim of this experiment was not to create another alternative to React, Vue or Angular2, just to understand better the issues those <em>libraries</em> (and <em>frameworks</em> — ok, Angular fans?) solve for us.</p><p>I’m pretty sure I’ve done it in a way you could consider <strong>naive</strong> — but again, this is just an investigation. Please share your thoughts on this.</p><p>You can see the project code on <a href="https://github.com/oldirony/minimal-js-mvc">Github</a>.</p><h4>The name</h4><p>Not a key part of the project, but I actually found myself wondering about how to name this framework.</p><p>Because of lack of ideas, I went for a pretty anonymous <strong>Minimal JS MVC</strong></p><h4>The structure</h4><p>The idea was to keep it simple. What were the most essential things to have?</p><ol><li>A controller</li><li>A parser</li><li>Something to listen to events</li><li>A demo example</li><li>A micro server to run the code</li><li>Some tests to make sure everything works</li></ol><p>Nothing very surprising here.</p><p>Because I like React, I imagined the controller as an extendable es6 class. There will be a controller per component.</p><p>The view, as well, is defined inside the component in this example. <em>However</em> the view its just a string, so no-one is stopping us from separate that in an another file.</p><p>In order to make this view usable, we need a logic to parse its content and find which model properties to render.</p><p>Lastly it is necessary to have an event handler that extrapolates the different event functions from a view template, identifies them within the controller methods and listens for them once the view it’s recreated in the DOM.</p><h4>Setup the environment</h4><p>I’ve kept a simple <em>Webpack</em> setup with Babel to have support for es6 syntax and modules.</p><p>I didn’t use the out-of-the-box Webpack dev server to have more flexibility later on. With hindsight, I could have used it — but that’s life. Maybe i’ll integrate it in the future.</p><h3>The code</h3><p>Let’s take a deeper dive into the code.</p><h4>controller.js</h4><p>The controller is the keystone of this small library. With this element all the components get extended and initialised.</p><p>For aesthetic and usability reasons I wanted the Controller to be used, as I said earlier, as a base for new classes. For instance:</p><pre><strong>class </strong>Article <strong>extends </strong>Controller {<br>   constructor(params){<br>      <strong>super</strong>(params);<br>   <br>      [...]</pre><p>And actually initialised and rendered with</p><pre>Article.<em>init</em>(VIEW_TEMPLATE, DOM_SELECTOR)</pre><p>In order to achieve this I needed to structure the Controller structure in a particular way:</p><pre><strong>class </strong>Controller {<em><br>   </em><strong>static </strong><em>init</em>(template, DOMSelector){<br>      <strong>if</strong>(!template || !DOMSelector) <strong>throw new </strong>Error(&#39;Please specify template string and DOM selector when instantiating a Controller&#39;);<br><br>      <strong>const </strong>instance =<strong>new this</strong>({<br>         template,<br>         DOMSelector<br>      });<br><br>      instance.render();<br>   }<br><br>   constructor({template, DOMSelector}){<br>      <strong>this</strong>.template = template;<br>      <strong>this</strong>.DOMSelector = DOMSelector;<br>   }</pre><p>The static initialiser takes the new class scope and creates a new instance of it with the specified template and DOM selector.</p><p>As you can see, the next step is the <em>render . </em>This is the render method con the controller.</p><pre>render(){<br>   <strong>const </strong>newHTML = parser.parse(<strong>this</strong>.template, <strong>this</strong>.properties);<br>   <strong>const </strong>DOMElem = document.querySelector(<strong>this</strong>.DOMSelector);<br><br>   <strong>if</strong>(!DOMElem) <strong>throw new </strong>Error(&#39;Please specify a selector for an existing DOMElement when initialising a controller.&#39;);<br><br>   DOMElem.innerHTML = newHTML;<br>   events.listen(DOMElem, <strong>this</strong>);<br>}</pre><p>First thing in the list is creating the parsed view template in the DOM with the component properties.</p><p>Now it’s time to check the role that the <em>parser</em> plays in it. Let just remember this <strong>render</strong> method later on.</p><h4>parser.js</h4><p>The parser js is a simple object of functional-programming-structured methods. The main function is, of course, <strong>parse</strong>.</p><pre>parse(htmlstring, controllerInstance){<br>   <strong>if</strong>(!controllerInstance.__id) controllerInstance.__id =`jsmvc-${id}`;<br><br>   <strong>let </strong>parsedHtmlstring = <strong>this</strong>._populate(htmlstring, controllerInstance);<br><br>   <strong>const </strong>map = <strong>this</strong>._mapEventIds(parsedHtmlstring, controllerInstance.__id);<br>   controllerInstance.__eventsMap = map.eventsMap;<br><br>   parsedHtmlstring = map.htmlstring;<br><br>   <strong>return </strong>parsedHtmlstring;<br>}</pre><p>What does it do?</p><ol><li>Sets the private property __id for the controller instance. We will need this later on to define and listen for events.</li><li>Populates the html string with the instance properties</li><li>Creates an <em>eventsMap.</em> This object contains both the list of events with the linked id and a second parse of the original html string.</li><li>Store the eventsMap into the main instance</li><li>Returns the parsed html</li></ol><p>Good. Next step is setting up how the events work.</p><h4>Events.js</h4><p>Going back to the render method of the controls we can see that the parsed view has been returned and rendered into the DOM.</p><p>Here the events object is invoked with its main method <strong>.listen</strong></p><pre>listen(DOMElem, controllerInstance){<br>   <strong>const </strong>eventsMap = controllerInstance.properties.__eventsMap;<br>   eventsMap.forEach(event =&gt; {<br>      <strong>if</strong>(!<strong>this</strong>._isFunction(event.method, controllerInstance)) <strong>return</strong>;<br><br>      DOMElem.querySelector(`[_id=&quot;${event.id}&quot;]`)<br>         .addEventListener(<br>            event.name,<br>            controllerInstance[event.method].bind(controllerInstance)<br>         )<br>   })<br>}</pre><p>This method simply loops through the eventsMap object attaching the controller instance methods to the specified listeners.</p><h4><strong>So…</strong></h4><p>It’s obviously clear this library it’s not production material. However it has been pretty interesting take a glance to the other side of the day-to-day libraries usage.</p><p>Events, one and two ways data-binding, rendering and other aspects that modern js frameworks cover are, in the end, simply js logics and base DOM interactions.</p><p>Developers shouldn’t forget that, however refined and intricate, frameworks are not based on <em>magic</em>, but (hopefully) clever code.</p><h4>Next steps</h4><p>Till now I’ve implemented one-way data-binding, a non rock-solid interaction event system and quick rendering system. Seems obvious it’s not complete yet.</p><p>Next challenges could be:</p><ul><li>Multiple events on same DOM element</li><li>Two-ways binding (input handle)</li><li>Multiple controllers interaction</li><li>Routes</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e46b744d4b0d" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>