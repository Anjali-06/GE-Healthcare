{
    "_id": {
        "$oid": "5be17a951f6e4f224230e262"
    },
    "twitterid": "bhogleharsha",
    "mediumid": "oldirony",
    "instagramid": "pandey_amita",
    "tweets": [
        {
            "text": "This is going to be a splendid result for Zimbabwe whose cricketers are to be greatly admired for giving off their\u2026 https://t.co/QWuITUxlIG",
            "lang": "English",
            "time": "2018-11-06",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "England's woes on the sub-continent seem to be continuing.....",
            "lang": "English",
            "time": "2018-11-06",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @BloodDonorsIn: #Patna Need #Blood B+ve at Ruban Hospital. Call 9835479510 via @p_rachna #BloodMatters",
            "lang": "English",
            "time": "2018-11-06",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @BloodDonorsIn: #Jabalpur #MadhyaPradesh Need #Blood O+ve at Mannu Lal Hospital. Call 7999820103 via @LordOfUniverse #BloodMatters",
            "lang": "English",
            "time": "2018-11-06",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @BloodDonorsIn: Via: @SaleemQadri_ \n#Srinagar\nBlood Type :  B-positive\nAt : LD Hospital.\nPrimary Number : 9070722672\nSecondary Number :\u2026",
            "lang": "English",
            "time": "2018-11-06",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @BloodDonorsIn: Via: @KupwaraTimes \n#Kupwara #JammuAndKashmir \nBlood Type :  B-positive\nAt : Sub District Hospital \nPrimary Number : 990\u2026",
            "lang": "English",
            "time": "2018-11-06",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "I think @SunRisers have got a pretty good deal. They have let go an excellent, but by all accounts unhappy, player\u2026 https://t.co/inqE99BZal",
            "lang": "English",
            "time": "2018-11-05",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @cricbuzz: Harsha Bhogle's ode to Rangana Herath - an Asian giant and a post-Muralitharan Sri Lanka saviour who bows out after the first\u2026",
            "lang": "English",
            "time": "2018-11-05",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @cricbuzz: Virat Kohli is at the height of his powers, says @BhogleHarsha, as the Indian captain turns 30 today https://t.co/zJx6cK6XsZ",
            "lang": "English",
            "time": "2018-11-05",
            "image": "http://pbs.twimg.com/media/DrNfj-hVsAEbloC.jpg",
            "video": "https://video.twimg.com/amplify_video/1059268110220324864/vid/1280x720/ETWWG0ZtjLBGivBF.mp4?tag=8"
        },
        {
            "text": "Extremely impressed with the calmness of Krunal Pandya. It has only been one game but he gives the impression he is ready.",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @cricbuzz: A contest that many thought would end up being one-sided, eventually became a close one that saw India win. Watch @bhoglehars\u2026",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "I am enjoying watching the calmer, more measured Dinesh Karthik bat. It would be interesting to ask him but I belie\u2026 https://t.co/KcaV9Od38G",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "Game on now! India need to keep wickets against the few overs of pace left because there is 8 overs of spin to follow",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "A track that has something for fast bowlers and T20 cricket looks different!",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "Now this is proper pace. Oshane Thomas. Troubling good batsmen with sheer speed.",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "Oh, West Indies! What is it with you and wrist spin?",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "RT @cricbuzz: It's time for a different ball-game, and the Windies are extremely competitive at it. Watch @bhogleharsha, @ImZaheer and Ajay\u2026",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "Debut today for Khaleel Ahmed. How things change. Only got a game in the IPL and now playing for India. Good on him\u2026 https://t.co/0TfYKuESra",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "@patteeemac @sallyrhooker @Aggerscricket @bbctms @GeoffreyBoycott @blowersh My wife and I have actually read the one we wrote!",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        },
        {
            "text": "@vaibhavdiy @Quora Yes, maybe. Been a while.",
            "lang": "English",
            "time": "2018-11-04",
            "image": "No Image",
            "video": "No Video"
        }
    ],
    "blogs": [
        {
            "text": "Learning about form management was the last piece of the puzzle and it gives me confidence to say I reached a good understanding of Angular 2.The proper way to progress further is to start using it on a daily basis, in a professional environment.So\u2026 I\u2019ve the chance of focusing on something new!I feel like I left React a bit aside lately\u2026 And that\u2019s a shame! I love how intuitive and fun is to create and maintain a project with it (sorry Angular).One area in particular that fascinates me is the how to digest these new GraphQL APIs and use this Apollo, of which I don\u2019t much (or anything at all).It sounds a bit fullstacky, but I\u2019d love to have a better understanding on the matter.So let\u2019s start give it a shot with this new course GraphQL with React: The Complete Developers Guide | Udemy.",
            "time": "2018-03-17"
        },
        {
            "text": "From an ignorant frontend developer\u2019s point of viewI personally thought a developer, to be considered \u2018full-stack\u2019, needed to have a deep knowledge, if not to master, both the frontend and backend worlds.However, reading around the web, I get that this is not the correct definition.As this very detailed article says:Being a Full-Stack Developer doesn\u2019t mean that you have necessarily mastered everything required to work with the front-end or back-end, but it means that you are able to work on both sides and understand what is going on when building an application.But if this is the right definition, I\u2019ve a couple of doubts.Does this mean a humble FE is not supposed to know \u2018what is going on when building an application\u2019 ?This is how this definitions sounds to me. And of course something like this cannot be taken seriously. Performance, bundle-sizing, API integration, FE routing, structuring forms are all activities which require a good understanding of the backend world. You don\u2019t understand that, you simply cannot be a good FE developer.Also, curiosity is a key feature in development. If you reached a good FE knowledge you want to understand what\u2019s around. I can bet every good FE dev has deployed his node.js server, or, probably more in the past than now, has played with PHP frameworks and app, from Wordpress to Laravel.I personally have knowledge of Node.js and PHP servers, Linux systems, CI &amp; CD, testing, SQL &amp; noSQL databases. I\u2019m a not a genius with them, but I can and I enjoy working in these areas. Does this make me a full-stack developer? I don\u2019t think so. I\u2019m a specialised FE dev with a side knowledge of \u2018what is going on when building an application\u2019 .How does this fit in a large team?I don\u2019t know!I reckon being able to tackle all the aspects of developing an application can be very useful in a small startup where the business cannot afford specialised roles. Or as well, it could be a very useful set of skills for a technical manager to scope and organise projects.However, for example, if my team has to take care of several frontend features and I\u2019ve to distribute these tasks in an Agile environment, I\u2019d prefer to rely on strong, specialised teammates. Wouldn\u2019t you do the same?I\u2019ve the feeling a fullstack developer knows how to do it, but maybe doesn\u2019t know the best way to do it. There are so many things to know on both the front and the back ends of web development, a person cannot simply know all of them.Sorry for thisI don\u2019t mean to offend anyone, I\u2019m just eager to find someone able to clarify my doubts.If anyone reads this and has a different point of view, please, I mean it - please!, let me know!",
            "time": "2018-02-03"
        },
        {
            "text": "Custom directives, services and routesCustom directivesWhen creating a new directive you can use this two powerful decorators: @HostBinding and @HostListener decorators:HostBinding bind an element property to a directive property. For instance:@HostBinding(&#39;class.open&#39;) isOpen:Boolean = falsebinds the \u2018open\u2019 class to the boolean property isOpen. Setting this property to true will add the class the html element.HostListener bind an element event to a directive method. For instance:@HostListener(&#39;click&#39;) handleClick() {   ...}will make your directive listening to the \u2018click\u2019 events on the host html element and wil trigger the newly defined handleClick method whenever the click happens.In the directive constructor you have access to at least these 2 props :private elRef: ElementRef, private renderer: Renderer2elRef contains the actual element in its nativeElement property.ServicesServices is common code used in several components that doesn\u2019t have influence over the DOM elements of the components. It\u2019s used by them but it doesnt belong to them. (es. store and fetch data).A service is a simple ts class. It can have properties and methods. However, to have it instanciated, don\u2019t use the new keyword.Instead, in your component main decorator, add the providers property assigned to an array containing your service class.@Component({  selector: &#39;app-component&#39;,  providers: [MyService]})Secondly, define a myService property of the type of your service in the component constructor.constructor(private myService:MyService) { }HoweverDepending on where you instantiate this component, the instance will be available to a different audience.If you instantiate it on the AppModule, the instance will be available to all the modules and services.If you instantiate it on the AppComponent, the instance will be available to all the modules but not the services.If you instantiate it on the a child component, the instance will be available to the component and its children.SoUsually you probably want to add the service in the provider only once, generally speaking in the AppModule. To access it, just pass the type in the constructor of your component.To inject services in other servicesRemember to add in to the receiver service the @Injectable decorator. That\u2019s it!RoutingSetupTo setup the routes, create an array of type Routes, imported from @angular/router and assign to it objects with a path and a component property.Then, add it to the imports array in the NgModule decorator, invoking the forRoot function with the routes array as parameter.import { RouterModule, Routes } from &quot;@angular/router&quot;;const routes: Routes = [    { path: &#39;&#39;, component: HomeComponent },    { path: &#39;about-us&#39;, component: AboutComponent },];@NgModule({    declarations: [        AppComponent,        HomeComponent,        AboutComponent,    ],    imports: [        BrowserModule,        RouterModule.forRoot(routes)    ],Step 2 is to add the directive\u200a\u2014\u200aplaceholder that updates its content with a module we specified in the routes, when the path matches, in your app html template.&lt;router-outlet&gt;&lt;/router-outlet&gt;Links in templateTo use a link within the router logic, add a routerLink attribute with the new url. Remember, the link is relative to the view where the link lies.&lt;a routerLink=&quot;/about-us&quot;&gt;About us&lt;/a&gt;Provide router active classTo make the About Us link active when the url of the page is the same of the routerLink, use the routerLinkActive set to the name of the active class you want to give.&lt;a routerLink=&quot;/about-us&quot;   routerLinkActive=&quot;is-active&quot;&gt;About us&lt;/a&gt;This directive however just checks if the provided link matches the url. For instance, the previous example would match also something like /about-us/helloTo prevent this from happening, you should also specify some options&lt;a routerLink=&quot;/about-us&quot;   routerLinkActive=&quot;is-active&quot;   [routerLinkActiveOptions]=&quot;{exact: true}&quot;&gt;About us&lt;/a&gt;Navigate programmaticallyYou can access the Router directly from the ts file.constructor(    private router: Router) And use the .navigate method from the newly defined router function.this.router.navigate([&#39;/about-us&#39;])If you are in a nested component (see later for more details), you may want to add an extra paramenter to the function that define what the new url has to be relative to.this.router.navigate([this.product.id], { relativeTo: this.route })Dynamic routesTo access a dynamic router, lets first define one with the following syntax.const routes: Routes = [    { path: &#39;/user/:id&#39;, component: UserComponent },];Now the component UserComponent wil be activated once you navigate to something like /user/110.To access that id from the code, you\u2019ll need to get the activatedRoute from the constructor:constructor(    private route: ActivatedRoute) {And access it in the method you need reading the params of the snapshot object of the route object.ngOnInit() {    this.id = this.route.snapshot.params[&#39;id&#39;]}This solution works fine when the component is first loaded. However, if the path parameters changes, you need a way to dinamically update your properties. Using a subscribing to the params observable will do the trick.ngOnInit() {    this.route.params       .subscribe(          (params: Params) =&gt; {             this.id = params.id          }       );}Query parameters and hashesTo setup a router link with some query parameters user the queryParams directive on the a tag:&lt;a   [routerLink]=&quot;[&#39;user&#39;, 30]&quot;   [queryParams]=&quot;{isAdmin: 1}&quot;&gt;   my Link    &lt;/a&gt;The new url will be resolved in /user/30?isAdmin=1 .To add an hash, or more technically a fragment, use the, guess what?, fragment directive.&lt;a   [routerLink]=&quot;[&#39;user&#39;, 30]&quot;   fragment=&quot;about&quot;&gt;   my Link&lt;/a&gt;The new url will be resolved in /user/30#about .To achieve this programmatically, just pass some options to the navigate method of router.this.router.navigate([&#39;user&#39;, 30], {        queryParams: {            isAdmin: 1,        },        fragment: &#39;intro&#39;    })To get this values from the url, you can do something very similar to what we did for the parameters. So:ngOnInit() {    this.route.snapshot.queryParams    this.route.queryParams.subscribe()    this.route.snapshot.fragment    this.route.fragment.subscribe()}To keep the current query parameters on new links with the navigate method, you may want to use the queryParamsHandling option set to \u2018preserve\u2019. To merge with new ones, set that property to \u2018merge\u2019.this.router.navigate([&#39;user&#39;, 30], {    queryParamsHandling: &#39;preserve&#39;})Nested routesTo user nested routes you have first to define their structure in the main app module. Let\u2019s add, for example a products route. From there we want to be able to see single product from as children of the ProductsComponent . So we have to specify the children property as an array of the nested routes.const routes: Routes = [    { path: &#39;&#39;, component: HomeComponent },    { path: &#39;about-us&#39;, component: AboutComponent },    { path: &#39;products&#39;, component: ProductsComponent, children: [       { path: &#39;:id&#39;, component: SingleProductComponent },    ]},];In the parent component we also have to add a second router-outlet tag to allow the children to be displayed. So in this case we add this to the ProductsComponent .&lt;router-outlet&gt;&lt;/router-outlet&gt;RedirectionsInstead of specifying a component in you routes, you can also define an alternative url where to be redirected to. For instance:const routes: Routes = [    { path: &#39;&#39;, component: HomeComponent },    { path: &#39;about-us&#39;, component: AboutComponent },    { path: &#39;who-we-are&#39;, redirectTo: &#39;about-us&#39; }];It\u2019s good practice to add a pathMatch: \u2018full\u2019 property to avoid matching issues.{ path: &#39;who-we-are&#39;, redirectTo: &#39;about-us&#39;, pathMatch: \u2018full\u2019 }WildcardsTo specify wildcards, simply use the double asterisk **const routes: Routes = [    { path: &#39;&#39;, component: HomeComponent },    { path: &#39;about-us&#39;, component: AboutComponent },    { path: &#39;**&#39;, component: &#39;NotFound&#39;}];",
            "time": "2018-01-13"
        },
        {
            "text": "Relationships between componentsPassing external properties to componentStep 1Using the Input decorator, make your component aware of this coming-in property. You can also pass an optional parameter to add to change the [myProp] name in the template (myPropAlias in the example).class MyComponent {   @Input(&#39;myPropAlias&#39;) myProp;   constructor() { }}Step 2You can now match this property with an external one in the html template.&lt;app-my-component   [myPropAlias]=&quot;myExternalProp&quot;&gt;&lt;/app-my-component&gt;Dispatching events to parent componentsWhen you have the necessity for a parent component to invoke a method when something specific happens in a child component (MyComponent, in this example), you have to go through 2 steps.Step 1Define the event inside the component class. You\u2019ll have to import the EventEmitter class and the Output Decorator from @angular/corehttps://medium.com/media/d50075c02a903b467d751a8c98d481cc/hrefStep 2Now wherever you use this component, you can hook the parent\u2019s methods to your new component event.https://medium.com/media/1562785c3a7af545431800277c08d70a/hrefThe $event object holds the events data: pass it as a parameter to make it available to the invoked methods.Referencing DOM elements in the templateIf you want to have a particular html element of your html template in your typescript code, you may want to use a local reference #.https://medium.com/media/5cdc407ddc124135c2b2adec47396d95/hrefAt this point we are able to get the newly referenced element into my ts code as parameter of the doSomething method.https://medium.com/media/70fb79b207503641f6fe4102efa36262/hrefIf you want to have access to a local reference before the methods, there is another way to achieve this. This is via the ViewChild decorator.https://medium.com/media/215a8381ff51869467b4ff3e33e422af/hrefPassing complex html content to a componentTo pass actual HTML content inside a component in this way:&lt;app-my-component&gt;  &lt;h1&gt;My title&lt;/h1&gt;  &lt;h2&gt;My subtitle&lt;/h2&gt;  &lt;ul&gt;    &lt;li&gt;Even&lt;/li&gt;    &lt;li&gt;a&lt;/li&gt;    &lt;li&gt;list&lt;/li&gt;  &lt;/ul&gt;&lt;/app-my-component&gt;You just have to make sure that in your MyComponent template you have the ng-content directive&lt;div class=&quot;my-content&quot;&gt;  &lt;p class=&quot;my-content-intro&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ad cumque deleniti molestias nam, optio provident.&lt;/p&gt;  &lt;ng-content&gt;&lt;/ng-content&gt;&lt;/div&gt;Referencing DOM elements in ng-contentIf you want to refer to the code inside ng-content, you can simply repeat the steps we saw earlier for DOM access. The only difference is not to use the @ViewChild decorator but @ViewContent.Components Lifecycle HooksEvery component has to go through different stages when built, changed and destroyed. Angular gives us hooks to allow us to call our methods during those stages.Just remember to import these interfaces from @angular/core when using them.I could rewrite them here, but for the sake of briefness, I\u2019ll just refer you to the official documentation https://angular.io/guide/lifecycle-hooks#lifecycle-sequence.This is more or less everything about components. I\u2019m about to start taking a deep dive into directives, always with this amazing course on Udemy. I warmly suggest you to give it a check!This article is part of my journey in learning Angular4. Here\u2019s the other articles:Step 1. Components overviewStep 2. Relationships between components",
            "time": "2017-11-26"
        },
        {
            "text": "A introductory, framework-agnostic article about how, what and when to test.📓 IntroSo many times we all wrote Javascript components and so many times we had to modify, change, extend them. Sometimes they are not very complicated; sometimes the change request arrives during the same project phase; sometimes we remember how and in which scenarios the component works; sometimes we had had time to implement meaningful error messages; sometimes we are the authors of these components.Other times, we are in trouble.When is JS testing useful?Generally speaking, once you have implemented a series of tests these are always good to have. However, there are situations where you would sacrifice you hamster to have had them.Your component/code is getting complicated.Is that line of code really necessary? In which scenario does my component requires this css class to work? Complexity prevents us to see all the consequences of our actions, we need some extra help to make sure everything will continue working after our modification.You have to edit a component you written months or years ago.Sometimes, while coding, it seems obvious what a function does and what those variables mean. Of course, if you are a good developer, you\u2019d use meaningful names and, when necessary, you\u2019d add some comments.However, sometimes these are not enough and if you are changing some very old code what seemed obvious now is an enigma. Let the testing tools help you!You have to edit a component someone else wrote.See situation #2How does testing actually work?To test you need a testing suite or framework. I\u2019m going to use Jest: I like it because it\u2019s a complete suite and I\u2019m used to it for testing React apps. Other great test frameworks are Jasmine and Mocha.Install the framework via npm.Have a componentToTest.test.js file (or componentToTest.spec.js).Insert some tests in this file.Run the framework via console.While the steps 1, 2 and 4 are dead simple, once you check the documentation of the testing suite, step #3 is definitely the most interesting.There are different types of tests, but lets first start with a simple one.Example #1Lets say we have a function in a utilities.js file.export function removeUnderscores(myString) {    return myString.replace(/_/g, &#39;&#39;);}At this point we want to make sure this function works and will always work.In our utilities.spec.js we need now to create a test in this wayimport { removeUnderscores } from &#39;./utilities&#39;;describe(&#39;Testing my utilities&#39;, () =&gt; {  test(&#39;removeUnderscores actually removes underscores&#39;, () =&gt; {    expect(removeUnderscores(&#39;blah_blah_blah&#39;))      .toEqual(&#39;blahblahblah&#39;);  });});Once setup a test like this, run the test suite in the console and\u2026Voila\u2019! It works!That\u2019s of course a very simple test, but now if someone changes and breaks that function you\u2019ll know it before it\u2019s too late!The syntaxAs we saw in the previous test, we nees to use some particular functions like describe, test, expect, in order to have things done. These functions comes with your test suite.They slightly change between frameworks, but let\u2019s see what the generically do.describe(description, func)This function is used to wrap groups of tests together and organise them under a readably title. Nothing else.test (description, func)test() or it() is the container for the actual test. It describes what it contains and it runs allnthe assertions inside the callback.expect(object)expect() is the first element of an assertion. It requires the object of the assertion as parameters and it has to concatenated to other functions that complete the process.These other functions come from some of the test suites or you may add extra assertion libraries to achieve the result you want. For example Mocha requires the library Chai to make assertions.An example about functional testingExample #1 is a typical unit testing example\u200a\u2014\u200awe make sure a function, the smallest unit in a module, with a given parameter returns a specific result.Functional testing is about simulate the component behaviour and double-check that everything goes how it should during this path. Let\u2019s check an example:Example #2\u200a\u2014\u200aSmall navigation toggleLets pretend we have a small mainNav component. This script will look for a specific element in the DOM and, if it finds, it will listen for a click on a children button. Here\u2019s the code for mainNav.https://medium.com/media/39dea9c699a56eea726d1fc4b4188e97/hrefIf you checked the code you may have noticed mainNav\u2019s button, once clicked, does a couple of things.It switches its label from \u2018Open menu\u2019 to \u2018Close menu\u2019 and vice versaIt adds and removes the .is-hidden class from the content elementNow that we know what it does, let\u2019s make sure it works!Give a check to the code below, I\u2019ll describe it after.https://medium.com/media/e44bdc9d89a1ce0beb0ccfb1b01ec39a/hrefFirst, lets make sure we have our class imported.Now with the beforeAll function (I think that\u2019s pretty clear what it does) let\u2019s simulate the document.body content with the required code and create the instance.I first like to create a empty tests that stops if our component returns errors on construction [It\u2019s initialised without errors].Let\u2019s check our first functional test [Click on button changes button text].We trigger a first click with the vanilla js function click and we expect the new button.text to be equal to the static class property labels.close. Triggering another click, we expect the label to be equal to labels.open. It if fails to do so for any reasons, now the test will make us aware of it.The second test checks whether the content element gets the .is-hidden class on toggle click.And\u2026Yay!This of course is just a brief intro to what is, or should be, actually a very important aspect of frontend development.Here\u2019s some other resources you can read to learn more about testing with Javascript:Unit, functional and integration testsIntro to test-driven developmentTesting React components👏 Clapping is caring! ⬇️",
            "time": "2017-10-17"
        },
        {
            "text": "Get your Medium posts to your website via Medium APIsA brief tutorial on how to display your latest posts on your website.The problemSome months ago I got the idea to add a blog section to my portfolio: an area where I could share my experiences and learnings. The idea was amazing: create a custom small CMS with Node.js, maybe linked to a MongoDB database. I\u2019d have also to create a CMS interface, handle the post status and several other things. Although the idea was feasible, it would have also required quite a bit of time to develop and test the code.At that point I asked myself, why not to use an existing platform? Take Medium, for example: awesome editor, great minimal UI and a cheerful and rich community of users. And so I did choose Medium as media to post and display my, lets say it, mediocre posts.Eventually however, the idea of displaying the posts on my portfolio pushed its way in my brain once again. I first checked the Medium API, I created an app on the dev platform, only to discover that these APIs are mainly focused on writing posts, more that merely displaying.Sniffing around google and Stack Overflow I found some guys saying that answer lied in their rss feed: https://medium.com/feed/@usernameWhat did I do than? I got axios in my portfolio React app and shot a quick GET call to the rss feed url: what did I received? An obvious CORS error and a fancy error message from the Medium server saying:localhost is not an allowed domain. Our host is (medium.com:443, /feed/@oldirony)Client side issues! So, let\u2019s focus on how I solve the issue.The solutionStep 1: Create an Express controllerAs we said, I faced these errors because I was trying to get this ajax call from the client. Lets bypass the issue and fetch my posts from the server.On my Node server, managed by express.js, I first had to create a new controller and refer it to its core file. The chosen route is /get-posts, so once the controller is setup I can access oldirony.cc/get-posts via GET to receive a json object with my Medium posts.import getPostsController from &#39;./server/get-posts&#39;;server.get(&#39;/get-posts&#39;, getPostsController);In get-posts.js, the first thing you\u2019ve to do is to export as default the controller function:export default (req, res) =&gt; {   res.send(&#39;Yeah&#39;)}Step 2: Fetch posts via NodeAt this point, we have to make the actual GET request. I used axios as library to fetch the posts, as I already had it in my dependencies.On call success, I send the stringified version of the response data to the page.import axios from &#39;axios&#39;;const POSTS_URL = &#39;https://medium.com/feed/@oldirony&#39;;export default (req, res) =&gt; {   axios.get(POSTS_URL)      .then(response =&gt; {         res.end(JSON.stringify(response.data))      })      .catch(err =&gt; res.end(err));}Step 3: Convert posts from XML to JSONYes, It\u2019s not finished yet. I found on the internet people suggesting to append ?format=json to the endpoint url to get the data in a JSON format, but, I don\u2019t know why, it didn\u2019t work for me.So, as the documentation is almost inexistent, I chose another solution.Using the xml2js library, I parsed the string using its own function parseString and I sent back to the page the stringified list of articles res2.rss.channel[0].item .import axios from &#39;axios&#39;;import { parseString } from &#39;xml2js&#39;;const POSTS_URL = &#39;https://medium.com/feed/@oldirony&#39;;export default (req, res) =&gt; {   axios.get(POSTS_URL)      .then(response =&gt; {         parseString(response.data, (err, res2) =&gt;{            res.end(JSON.stringify(res2.rss.channel[0].item))         })      })      .catch(response =&gt; res.end(response.data));}Step 4: Get posts to the actual website pageNow that we got our list of posts of our Node server we can easily access them from our page.I\u2019m using React and Redux on portfolio, so what I did was to setup an action creator that fetches from our predefined route \u2018/get-posts\u2019 on a specific homepage section onMount event.This, anyway, is the essential code:import axios from &#39;axios&#39;;const POSTS_URL = &#39;/get-posts&#39;;export function fetchPosts() {   return function(dispatch) {      axios.get(POSTS_URL).then((response) =&gt; {         // Here response.data contains an array with your          // most recent posts.      })   }}And this is it! For any question, just drop a line in the comments.",
            "time": "2017-10-01"
        },
        {
            "text": "Angular2 . Quick ref notes | part 1Component overviewSo I started learning Angular4! It looks like an interesting journey: I\u2019m having the chance to see how another dev team solves the typical issues that a js framework faces.I listed here the first part of my learnings. You can use this a quick reference guide.ComponentsComponents are the most basic element of the apps. These are the Lego bricks what will compose your engine. These elements will contain their own JS logic, html structure and styles.To create a component you can either run this command in the console:ng generate component componentNameOr this, with a more compact syntax:ng g c componentNameOr create follow this steps to create a component manually:1. Create the main .ts fileCreate a componentName/componentName.component.ts file. In here, simply define the class that is going to give shape to your component and export it.export class ComponentNameComponent {   constructor(){}}Also, remember to set this class up with the boilerplate structure of a component with a decorator. Import the decorator function from angular and define the minimal settings, selector and templateUrl (or template).import { Component } from &#39;@angular/core&#39;;@Component({    selector: &#39;app-component-name&#39;,    templateUrl: &#39;./header.component.html&#39;})export class ComponentNameComponent {    constructor() {}}selector defines the way you can invoke this component in your app. It can be an HTML selector (default), an attribute or event a class.templateUrl define the path to the html template of the component.or template allows you to define an inline html template (useful for small components)There are a lot of other properties you can define from here. They are listed here.2. Create the html template file.If you specified the templateUrl property, you\u2019ll need also to add this template file.3. Include component in the app moduleIn the app.module.ts file, import your newly created component with an import statement and add it in the declarations array of you app module.import { ComponentNameComponent } from &#39;./header/header.component&#39;;@NgModule({  declarations: [    AppComponent,    ComponentNameComponent  ],  imports: [    BrowserModule  ],  providers: [],  bootstrap: [AppComponent]})export class AppModule { }DecoratorsTemplate syntaxProperty binding in templates with [ ]. You can edit all the js properties of the DOM element.[disabled]=\u201cisDisabled\u201dEvent binding in templates with (). Ie(click)=\u201cmyEvent()\u201d;Standard directives as two ways data binding* using ngModel directive on an input.[(ngModel)]=\u201cpropName\u201dFor 2 ways Data Binding, FormsModule should be included in the app module.Structural directives requires * in the syntax. It handles the structure of the DOM element, not only properties. For instance:&lt;div *ngIf=&quot;isVisible&quot;&gt;&lt;/div&gt;Local reference #DirectivesDirectives are instructions in the DOM. Usually the selector is an attribute. Defined with the @Directive decorator.If/else conditionalsTo use a simple if statement use*ngIf=\u201dcondition\u201dTo use the else in the conditional we need to create a local reference with #, add an ng-template with that reference and enhance the ngIf condition with it. For instance:&lt;p *ngIf=\u201disDefined; else #notDefined\u201d&gt;It&#39;s defined!&lt;/p&gt;&lt;ng-template #notDefined&gt;    &lt;p&gt;Not defined&lt;/p&gt;&lt;ng-template&gt;Conditional styleUse [ngStyle] equal to an object of styles to customise the style of an element. For instance:&lt;div [ngStyle]=&quot;{backgroundColor: getBgColor()}&quot;&gt;NB. The kebab-case of the css props becomes camelCase.Conditional classesUse [ngClass] to conditionally set classes&lt;div [ngClass]=&quot;{isActive: isActive()}&quot;&gt;For each loopsUse the structural directive ngFor.&lt;div *ngFor=&quot;let item of items&quot;&gt;You can access the index prop in this fashion:&lt;div *ngFor=&quot;let item of items; let i of index&quot;&gt;TypekitVariables type restrictionTypescript gives you the possibility of enforcing the type of the variables. Something similar to what you can (and should) do with propTypes in React.First things first, when you create a class, you have to initialise the properties you are going to use later on. For instance:class MyClass {    public title: string;    public id: number;    constructor() { }}Define variable type on declaration using : . For instancemyStringVar: string = \u2018Text text\u2019To define a variable as array of something, in this case an array of strings:myArray: string[] = [&#39;server1&#39;, &#39;server2&#39;];Define inline variable type with &lt;type&gt;myVar. You may want to use brackets.(&lt;HTMLInputElement&gt;event.target).valueModelsAs you know Angular2+ relies on typescript for internal code validation. Therefore, not surprisingly, Angular models are pure TS classes.A model consists in a TS class where we define the required and possible properties. For instance:export class MyModel {    public name: string;    public description: string;    constructor(name: string, desc: string) {        this.name = name;        this.description = desc;    }}This is as more compact syntax:export class MyModel {    constructor(public name: string, public description: string) {}     }This code will allow us to generate valid Recipes with typescript. To do this, just import the model and use to validate objects:import { MyModel } from &quot;../myModel.model&quot;;[...]export class RecipeListComponent implements OnInit {  recipes: MyModel[] = [];This article is part of my journey in learning Angular4. Here\u2019s the other articles:Step 1. Components overviewStep 2. Relationships between components",
            "time": "2017-09-29"
        },
        {
            "text": "Let me stop you here. This is not a tutorial article or anything similar. I\u2019m just collecting my first impressions on Angular4 to see how (and if) these change as I get to know more of this framework.I\u2019ve been working with React for a couple of years now and I find it elegant, efficient and, once you get to know it, very easy to integrate and extend.However, I cannot ignore the fact that there are a lot of people who, for one reason or another, support Angular2 (that now has become Angular4).I decided therefore to start exploring and learning it: this will allow me to have a more objective vision of these frameworks and when to use one or another. You know, knowledge is power. Learning will give you the chance of really comparing frameworks! How can you say something is better that something else, if you don\u2019t know one of the comparison terms?How can you say something is better that something else, if you don\u2019t know one of the comparison terms?I had already followed several courses on Udemy, so i decided to look for something to get started. The one I chose is this one: https://www.udemy.com/the-complete-guide-to-angular-2/.First impressions👍 Cli basedI\u2019ve been working with the CLI for 3 years now and I consider it an utmost invaluable (and indispensable) friend in my day to day work. The fact that to create and run even the most basic angular project requires this tool, is for me a very good sign.👍 TypescriptI love the idea of having a tool that enforce the code while you write it. Even if it takes a tiny bit longer to have your script written, Typescript makes sure that your code is used in the way you want. If my parameter numberOfFishes is supposed to a number, I want it to always be a number. If a colleague of mine invokes that function with numberOfFishes set as \u2018nope\u2019, I\u2019d like to throw something at him\u200a\u2014 better if that something is an error.✋ ModulesAbout this, i haven\u2019t quite enjoyed or, to be honest, completely understood, the need of specifying modules. For example, why do i have to invoke the FormModule to insert an input and binding it? I suppose this is to keep the bundle size to the bare minimum. However, meh!✋ Templating syntaxI\u2019m not quite amused by not being able to freely insert js in the templates and, instead, having to learn a quite specific syntax as, for instance, [(ngModule)]=\u201cmyProp\u201d.Once again, the one writing is only someone who has used this framework for no more than half an hour.I\u2019m writing a follow-up article as I study and experience Angular4. I\u2019ll put the link in here\u2026 for anyone who managed to pass over this bunch of groundless opinions.",
            "time": "2017-09-02"
        },
        {
            "text": "Some weeks ago, talking with a friend of mine, we started imagining how difficult would be to create an MVC framework from scratch and which difficulties we could encounter. I had a bit of spare time during the following weekend, so I decided to give it a try.The aim of this experiment was not to create another alternative to React, Vue or Angular2, just to understand better the issues those libraries (and frameworks\u200a\u2014\u200aok, Angular fans?) solve for us.I\u2019m pretty sure I\u2019ve done it in a way you could consider naive\u200a\u2014\u200abut again, this is just an investigation. Please share your thoughts on this.You can see the project code on Github.The nameNot a key part of the project, but I actually found myself wondering about how to name this framework.Because of lack of ideas, I went for a pretty anonymous Minimal JS MVCThe structureThe idea was to keep it simple. What were the most essential things to have?A controllerA parserSomething to listen to eventsA demo exampleA micro server to run the codeSome tests to make sure everything worksNothing very surprising here.Because I like React, I imagined the controller as an extendable es6 class. There will be a controller per component.The view, as well, is defined inside the component in this example. However the view its just a string, so no-one is stopping us from separate that in an another file.In order to make this view usable, we need a logic to parse its content and find which model properties to render.Lastly it is necessary to have an event handler that extrapolates the different event functions from a view template, identifies them within the controller methods and listens for them once the view it\u2019s recreated in the DOM.Setup the environmentI\u2019ve kept a simple Webpack setup with Babel to have support for es6 syntax and modules.I didn\u2019t use the out-of-the-box Webpack dev server to have more flexibility later on. With hindsight, I could have used it\u200a\u2014 but that\u2019s life. Maybe i\u2019ll integrate it in the future.The codeLet\u2019s take a deeper dive into the code.controller.jsThe controller is the keystone of this small library. With this element all the components get extended and initialised.For aesthetic and usability reasons I wanted the Controller to be used, as I said earlier, as a base for new classes. For instance:class Article extends Controller {   constructor(params){      super(params);         [...]And actually initialised and rendered withArticle.init(VIEW_TEMPLATE, DOM_SELECTOR)In order to achieve this I needed to structure the Controller structure in a particular way:class Controller {   static init(template, DOMSelector){      if(!template || !DOMSelector) throw new Error(&#39;Please specify template string and DOM selector when instantiating a Controller&#39;);      const instance =new this({         template,         DOMSelector      });      instance.render();   }   constructor({template, DOMSelector}){      this.template = template;      this.DOMSelector = DOMSelector;   }The static initialiser takes the new class scope and creates a new instance of it with the specified template and DOM selector.As you can see, the next step is the render . This is the render method con the controller.render(){   const newHTML = parser.parse(this.template, this.properties);   const DOMElem = document.querySelector(this.DOMSelector);   if(!DOMElem) throw new Error(&#39;Please specify a selector for an existing DOMElement when initialising a controller.&#39;);   DOMElem.innerHTML = newHTML;   events.listen(DOMElem, this);}First thing in the list is creating the parsed view template in the DOM with the component properties.Now it\u2019s time to check the role that the parser plays in it. Let just remember this render method later on.parser.jsThe parser js is a simple object of functional-programming-structured methods. The main function is, of course, parse.parse(htmlstring, controllerInstance){   if(!controllerInstance.__id) controllerInstance.__id =`jsmvc-${id}`;   let parsedHtmlstring = this._populate(htmlstring, controllerInstance);   const map = this._mapEventIds(parsedHtmlstring, controllerInstance.__id);   controllerInstance.__eventsMap = map.eventsMap;   parsedHtmlstring = map.htmlstring;   return parsedHtmlstring;}What does it do?Sets the private property __id for the controller instance. We will need this later on to define and listen for events.Populates the html string with the instance propertiesCreates an eventsMap. This object contains both the list of events with the linked id and a second parse of the original html string.Store the eventsMap into the main instanceReturns the parsed htmlGood. Next step is setting up how the events work.Events.jsGoing back to the render method of the controls we can see that the parsed view has been returned and rendered into the DOM.Here the events object is invoked with its main method .listenlisten(DOMElem, controllerInstance){   const eventsMap = controllerInstance.properties.__eventsMap;   eventsMap.forEach(event =&gt; {      if(!this._isFunction(event.method, controllerInstance)) return;      DOMElem.querySelector(`[_id=&quot;${event.id}&quot;]`)         .addEventListener(            event.name,            controllerInstance[event.method].bind(controllerInstance)         )   })}This method simply loops through the eventsMap object attaching the controller instance methods to the specified listeners.So\u2026It\u2019s obviously clear this library it\u2019s not production material. However it has been pretty interesting take a glance to the other side of the day-to-day libraries usage.Events, one and two ways data-binding, rendering and other aspects that modern js frameworks cover are, in the end, simply js logics and base DOM interactions.Developers shouldn\u2019t forget that, however refined and intricate, frameworks are not based on magic, but (hopefully) clever code.Next stepsTill now I\u2019ve implemented one-way data-binding, a non rock-solid interaction event system and quick rendering system. Seems obvious it\u2019s not complete yet.Next challenges could be:Multiple events on same DOM elementTwo-ways binding (input handle)Multiple controllers interactionRoutes",
            "time": "2017-07-02"
        }
    ],
    "posts": [
        {
            "text": "The road tripp begins 💃👯👫👫👫",
            "url": "https://instagram.famd5-1.fna.fbcdn.net/vp/c4f5b07ecc259a437f87bb0749a12f80/5BE386AD/t51.2885-15/e35/43913299_356344625101823_5536165948847527100_n.jpg",
            "likes": 45
        },
        {
            "text": "It's a lot more than just losing weight.\nIt is infact a learning of food, for life!",
            "url": "https://instagram.famd5-1.fna.fbcdn.net/vp/e3422a9e2347204e611595d56015905c/5C78A836/t51.2885-15/e35/42512048_349974845570752_2484900228517339811_n.jpg",
            "likes": 26
        },
        {
            "text": "The barter of roasted almond and tender coconut!\n\nfair enough right??",
            "url": "https://instagram.famd5-1.fna.fbcdn.net/vp/b935b5179a3c44d25b3796e5973ab6eb/5BE3E54C/t51.2885-15/e35/43913167_723191241371099_1513481966327159438_n.jpg",
            "likes": 78
        },
        {
            "text": "Something about it💋",
            "url": "https://instagram.famd5-1.fna.fbcdn.net/vp/9fb9cb2978c913e9464f3ee01ca6d087/5C750370/t51.2885-15/e35/43607982_350119142425573_5541414630421451717_n.jpg",
            "likes": 84
        },
        {
            "text": "Clicking a single picture is so difficult in life, and then choosing which ones to upload is even more difficult after you have had a bang on day.\n\n#dussehra2018  #officeoffice",
            "url": "https://instagram.famd5-1.fna.fbcdn.net/vp/6abf52df6a1d72360b93c34a32475d1d/5C6FE543/t51.2885-15/e35/42766325_770330639977046_4895834986171047366_n.jpg",
            "likes": 119
        }
    ]
}
